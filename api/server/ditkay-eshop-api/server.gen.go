// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Media defines model for Media.
type Media struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Image       *string `json:"image,omitempty"`
}

// MediaType defines model for MediaType.
type MediaType struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Product defines model for Product.
type Product struct {
	BuyPrice    *float32 `json:"buyPrice,omitempty"`
	Description *string  `json:"description,omitempty"`
	Id          *string  `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
	SellPrice   *float32 `json:"sellPrice,omitempty"`
}

// ProductMedia defines model for ProductMedia.
type ProductMedia struct {
	Id        *string `json:"id,omitempty"`
	MediaId   *string `json:"mediaId,omitempty"`
	MediaType *string `json:"mediaType,omitempty"`
	ProductId *string `json:"productId,omitempty"`
}

// DeleteMediaJSONRequestBody defines body for DeleteMedia for application/json ContentType.
type DeleteMediaJSONRequestBody = Media

// PatchMediaJSONRequestBody defines body for PatchMedia for application/json ContentType.
type PatchMediaJSONRequestBody = Media

// PostMediaJSONRequestBody defines body for PostMedia for application/json ContentType.
type PostMediaJSONRequestBody = Media

// DeleteMediaTypeJSONRequestBody defines body for DeleteMediaType for application/json ContentType.
type DeleteMediaTypeJSONRequestBody = MediaType

// PatchMediaTypeJSONRequestBody defines body for PatchMediaType for application/json ContentType.
type PatchMediaTypeJSONRequestBody = MediaType

// PostMediaTypeJSONRequestBody defines body for PostMediaType for application/json ContentType.
type PostMediaTypeJSONRequestBody = MediaType

// DeleteProductJSONRequestBody defines body for DeleteProduct for application/json ContentType.
type DeleteProductJSONRequestBody = Product

// PatchProductJSONRequestBody defines body for PatchProduct for application/json ContentType.
type PatchProductJSONRequestBody = Product

// PostProductJSONRequestBody defines body for PostProduct for application/json ContentType.
type PostProductJSONRequestBody = Product

// DeleteProductMediaJSONRequestBody defines body for DeleteProductMedia for application/json ContentType.
type DeleteProductMediaJSONRequestBody = ProductMedia

// PatchProductMediaJSONRequestBody defines body for PatchProductMedia for application/json ContentType.
type PatchProductMediaJSONRequestBody = ProductMedia

// PostProductMediaJSONRequestBody defines body for PostProductMedia for application/json ContentType.
type PostProductMediaJSONRequestBody = ProductMedia

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteMedia request with any body
	DeleteMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMedia(ctx context.Context, body DeleteMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMedia request with any body
	PatchMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMedia(ctx context.Context, body PatchMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMedia request with any body
	PostMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMedia(ctx context.Context, body PostMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMediaType request with any body
	DeleteMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMediaType(ctx context.Context, body DeleteMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMediaType request with any body
	PatchMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMediaType(ctx context.Context, body PatchMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMediaType request with any body
	PostMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMediaType(ctx context.Context, body PostMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaTypeMediaTypeId request
	GetMediaTypeMediaTypeId(ctx context.Context, mediaTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaTypes request
	GetMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMedias request
	RemoveMedias(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaMediaId request
	GetMediaMediaId(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMedias request
	GetMedias(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProduct request with any body
	DeleteProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProduct(ctx context.Context, body DeleteProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchProduct request with any body
	PatchProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProduct(ctx context.Context, body PatchProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProduct request with any body
	PostProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProduct(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductMedia request with any body
	DeleteProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductMedia(ctx context.Context, body DeleteProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchProductMedia request with any body
	PatchProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProductMedia(ctx context.Context, body PatchProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductMedia request with any body
	PostProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductMedia(ctx context.Context, body PostProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllProductWithProductId request
	GetAllProductWithProductId(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductMediaProductMediaId request
	GetProductMediaProductMediaId(ctx context.Context, productMediaId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductMedias request
	GetProductMedias(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductProductId request
	GetProductProductId(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMedia(ctx context.Context, body DeleteMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMedia(ctx context.Context, body PatchMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMedia(ctx context.Context, body PostMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMediaTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMediaType(ctx context.Context, body DeleteMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMediaTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMediaTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMediaType(ctx context.Context, body PatchMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMediaTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMediaTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMediaTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMediaType(ctx context.Context, body PostMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMediaTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaTypeMediaTypeId(ctx context.Context, mediaTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaTypeMediaTypeIdRequest(c.Server, mediaTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMedias(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMediasRequest(c.Server, mediaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaMediaId(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaMediaIdRequest(c.Server, mediaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMedias(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProduct(ctx context.Context, body DeleteProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProduct(ctx context.Context, body PatchProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProduct(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductMedia(ctx context.Context, body DeleteProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProductMedia(ctx context.Context, body PatchProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProductMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductMedia(ctx context.Context, body PostProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllProductWithProductId(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllProductWithProductIdRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductMediaProductMediaId(ctx context.Context, productMediaId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductMediaProductMediaIdRequest(c.Server, productMediaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductMedias(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductMediasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductProductId(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductProductIdRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteMediaRequest calls the generic DeleteMedia builder with application/json body
func NewDeleteMediaRequest(server string, body DeleteMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteMediaRequestWithBody generates requests for DeleteMedia with any type of body
func NewDeleteMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchMediaRequest calls the generic PatchMedia builder with application/json body
func NewPatchMediaRequest(server string, body PatchMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchMediaRequestWithBody generates requests for PatchMedia with any type of body
func NewPatchMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMediaRequest calls the generic PostMedia builder with application/json body
func NewPostMediaRequest(server string, body PostMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMediaRequestWithBody generates requests for PostMedia with any type of body
func NewPostMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMediaTypeRequest calls the generic DeleteMediaType builder with application/json body
func NewDeleteMediaTypeRequest(server string, body DeleteMediaTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMediaTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteMediaTypeRequestWithBody generates requests for DeleteMediaType with any type of body
func NewDeleteMediaTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchMediaTypeRequest calls the generic PatchMediaType builder with application/json body
func NewPatchMediaTypeRequest(server string, body PatchMediaTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMediaTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchMediaTypeRequestWithBody generates requests for PatchMediaType with any type of body
func NewPatchMediaTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMediaTypeRequest calls the generic PostMediaType builder with application/json body
func NewPostMediaTypeRequest(server string, body PostMediaTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMediaTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMediaTypeRequestWithBody generates requests for PostMediaType with any type of body
func NewPostMediaTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMediaTypeMediaTypeIdRequest generates requests for GetMediaTypeMediaTypeId
func NewGetMediaTypeMediaTypeIdRequest(server string, mediaTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaTypeId", runtime.ParamLocationPath, mediaTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaTypesRequest generates requests for GetMediaTypes
func NewGetMediaTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMediasRequest generates requests for RemoveMedias
func NewRemoveMediasRequest(server string, mediaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/remove/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaMediaIdRequest generates requests for GetMediaMediaId
func NewGetMediaMediaIdRequest(server string, mediaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediasRequest generates requests for GetMedias
func NewGetMediasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/medias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProductRequest calls the generic DeleteProduct builder with application/json body
func NewDeleteProductRequest(server string, body DeleteProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteProductRequestWithBody generates requests for DeleteProduct with any type of body
func NewDeleteProductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchProductRequest calls the generic PatchProduct builder with application/json body
func NewPatchProductRequest(server string, body PatchProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProductRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchProductRequestWithBody generates requests for PatchProduct with any type of body
func NewPatchProductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductRequest calls the generic PostProduct builder with application/json body
func NewPostProductRequest(server string, body PostProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductRequestWithBody generates requests for PostProduct with any type of body
func NewPostProductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductMediaRequest calls the generic DeleteProductMedia builder with application/json body
func NewDeleteProductMediaRequest(server string, body DeleteProductMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteProductMediaRequestWithBody generates requests for DeleteProductMedia with any type of body
func NewDeleteProductMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchProductMediaRequest calls the generic PatchProductMedia builder with application/json body
func NewPatchProductMediaRequest(server string, body PatchProductMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProductMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchProductMediaRequestWithBody generates requests for PatchProductMedia with any type of body
func NewPatchProductMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductMediaRequest calls the generic PostProductMedia builder with application/json body
func NewPostProductMediaRequest(server string, body PostProductMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductMediaRequestWithBody generates requests for PostProductMedia with any type of body
func NewPostProductMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllProductWithProductIdRequest generates requests for GetAllProductWithProductId
func NewGetAllProductWithProductIdRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-media/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductMediaProductMediaIdRequest generates requests for GetProductMediaProductMediaId
func NewGetProductMediaProductMediaIdRequest(server string, productMediaId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productMediaId", runtime.ParamLocationPath, productMediaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductMediasRequest generates requests for GetProductMedias
func NewGetProductMediasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product-medias")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductProductIdRequest generates requests for GetProductProductId
func NewGetProductProductIdRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteMedia request with any body
	DeleteMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error)

	DeleteMediaWithResponse(ctx context.Context, body DeleteMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error)

	// PatchMedia request with any body
	PatchMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMediaResponse, error)

	PatchMediaWithResponse(ctx context.Context, body PatchMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMediaResponse, error)

	// PostMedia request with any body
	PostMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMediaResponse, error)

	PostMediaWithResponse(ctx context.Context, body PostMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMediaResponse, error)

	// DeleteMediaType request with any body
	DeleteMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMediaTypeResponse, error)

	DeleteMediaTypeWithResponse(ctx context.Context, body DeleteMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMediaTypeResponse, error)

	// PatchMediaType request with any body
	PatchMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMediaTypeResponse, error)

	PatchMediaTypeWithResponse(ctx context.Context, body PatchMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMediaTypeResponse, error)

	// PostMediaType request with any body
	PostMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMediaTypeResponse, error)

	PostMediaTypeWithResponse(ctx context.Context, body PostMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMediaTypeResponse, error)

	// GetMediaTypeMediaTypeId request
	GetMediaTypeMediaTypeIdWithResponse(ctx context.Context, mediaTypeId string, reqEditors ...RequestEditorFn) (*GetMediaTypeMediaTypeIdResponse, error)

	// GetMediaTypes request
	GetMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaTypesResponse, error)

	// RemoveMedias request
	RemoveMediasWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*RemoveMediasResponse, error)

	// GetMediaMediaId request
	GetMediaMediaIdWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*GetMediaMediaIdResponse, error)

	// GetMedias request
	GetMediasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediasResponse, error)

	// DeleteProduct request with any body
	DeleteProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error)

	DeleteProductWithResponse(ctx context.Context, body DeleteProductJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error)

	// PatchProduct request with any body
	PatchProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductResponse, error)

	PatchProductWithResponse(ctx context.Context, body PatchProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductResponse, error)

	// PostProduct request with any body
	PostProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductResponse, error)

	PostProductWithResponse(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductResponse, error)

	// DeleteProductMedia request with any body
	DeleteProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductMediaResponse, error)

	DeleteProductMediaWithResponse(ctx context.Context, body DeleteProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductMediaResponse, error)

	// PatchProductMedia request with any body
	PatchProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductMediaResponse, error)

	PatchProductMediaWithResponse(ctx context.Context, body PatchProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductMediaResponse, error)

	// PostProductMedia request with any body
	PostProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductMediaResponse, error)

	PostProductMediaWithResponse(ctx context.Context, body PostProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductMediaResponse, error)

	// GetAllProductWithProductId request
	GetAllProductWithProductIdWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetAllProductWithProductIdResponse, error)

	// GetProductMediaProductMediaId request
	GetProductMediaProductMediaIdWithResponse(ctx context.Context, productMediaId string, reqEditors ...RequestEditorFn) (*GetProductMediaProductMediaIdResponse, error)

	// GetProductMedias request
	GetProductMediasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductMediasResponse, error)

	// GetProductProductId request
	GetProductProductIdWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductProductIdResponse, error)

	// GetProducts request
	GetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)
}

type DeleteMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Media
}

// Status returns HTTPResponse.Status
func (r PatchMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Media
}

// Status returns HTTPResponse.Status
func (r PostMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMediaTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMediaTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMediaTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMediaTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaType
}

// Status returns HTTPResponse.Status
func (r PatchMediaTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMediaTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMediaTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MediaType
}

// Status returns HTTPResponse.Status
func (r PostMediaTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMediaTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaTypeMediaTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaType
}

// Status returns HTTPResponse.Status
func (r GetMediaTypeMediaTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaTypeMediaTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MediaType
}

// Status returns HTTPResponse.Status
func (r GetMediaTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMediasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMediasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMediasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaMediaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Media
}

// Status returns HTTPResponse.Status
func (r GetMediaMediaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaMediaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Media
}

// Status returns HTTPResponse.Status
func (r GetMediasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r PatchProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
}

// Status returns HTTPResponse.Status
func (r PostProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProductMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchProductMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMedia
}

// Status returns HTTPResponse.Status
func (r PatchProductMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchProductMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductMedia
}

// Status returns HTTPResponse.Status
func (r PostProductMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllProductWithProductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Media
}

// Status returns HTTPResponse.Status
func (r GetAllProductWithProductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllProductWithProductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductMediaProductMediaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMedia
}

// Status returns HTTPResponse.Status
func (r GetProductMediaProductMediaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductMediaProductMediaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductMediasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductMedia
}

// Status returns HTTPResponse.Status
func (r GetProductMediasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductMediasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductProductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r GetProductProductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductProductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Product
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteMediaWithBodyWithResponse request with arbitrary body returning *DeleteMediaResponse
func (c *ClientWithResponses) DeleteMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error) {
	rsp, err := c.DeleteMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMediaResponse(rsp)
}

func (c *ClientWithResponses) DeleteMediaWithResponse(ctx context.Context, body DeleteMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error) {
	rsp, err := c.DeleteMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMediaResponse(rsp)
}

// PatchMediaWithBodyWithResponse request with arbitrary body returning *PatchMediaResponse
func (c *ClientWithResponses) PatchMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMediaResponse, error) {
	rsp, err := c.PatchMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMediaResponse(rsp)
}

func (c *ClientWithResponses) PatchMediaWithResponse(ctx context.Context, body PatchMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMediaResponse, error) {
	rsp, err := c.PatchMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMediaResponse(rsp)
}

// PostMediaWithBodyWithResponse request with arbitrary body returning *PostMediaResponse
func (c *ClientWithResponses) PostMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMediaResponse, error) {
	rsp, err := c.PostMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMediaResponse(rsp)
}

func (c *ClientWithResponses) PostMediaWithResponse(ctx context.Context, body PostMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMediaResponse, error) {
	rsp, err := c.PostMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMediaResponse(rsp)
}

// DeleteMediaTypeWithBodyWithResponse request with arbitrary body returning *DeleteMediaTypeResponse
func (c *ClientWithResponses) DeleteMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMediaTypeResponse, error) {
	rsp, err := c.DeleteMediaTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMediaTypeResponse(rsp)
}

func (c *ClientWithResponses) DeleteMediaTypeWithResponse(ctx context.Context, body DeleteMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMediaTypeResponse, error) {
	rsp, err := c.DeleteMediaType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMediaTypeResponse(rsp)
}

// PatchMediaTypeWithBodyWithResponse request with arbitrary body returning *PatchMediaTypeResponse
func (c *ClientWithResponses) PatchMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMediaTypeResponse, error) {
	rsp, err := c.PatchMediaTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMediaTypeResponse(rsp)
}

func (c *ClientWithResponses) PatchMediaTypeWithResponse(ctx context.Context, body PatchMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMediaTypeResponse, error) {
	rsp, err := c.PatchMediaType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMediaTypeResponse(rsp)
}

// PostMediaTypeWithBodyWithResponse request with arbitrary body returning *PostMediaTypeResponse
func (c *ClientWithResponses) PostMediaTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMediaTypeResponse, error) {
	rsp, err := c.PostMediaTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMediaTypeResponse(rsp)
}

func (c *ClientWithResponses) PostMediaTypeWithResponse(ctx context.Context, body PostMediaTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMediaTypeResponse, error) {
	rsp, err := c.PostMediaType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMediaTypeResponse(rsp)
}

// GetMediaTypeMediaTypeIdWithResponse request returning *GetMediaTypeMediaTypeIdResponse
func (c *ClientWithResponses) GetMediaTypeMediaTypeIdWithResponse(ctx context.Context, mediaTypeId string, reqEditors ...RequestEditorFn) (*GetMediaTypeMediaTypeIdResponse, error) {
	rsp, err := c.GetMediaTypeMediaTypeId(ctx, mediaTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaTypeMediaTypeIdResponse(rsp)
}

// GetMediaTypesWithResponse request returning *GetMediaTypesResponse
func (c *ClientWithResponses) GetMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediaTypesResponse, error) {
	rsp, err := c.GetMediaTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaTypesResponse(rsp)
}

// RemoveMediasWithResponse request returning *RemoveMediasResponse
func (c *ClientWithResponses) RemoveMediasWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*RemoveMediasResponse, error) {
	rsp, err := c.RemoveMedias(ctx, mediaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMediasResponse(rsp)
}

// GetMediaMediaIdWithResponse request returning *GetMediaMediaIdResponse
func (c *ClientWithResponses) GetMediaMediaIdWithResponse(ctx context.Context, mediaId string, reqEditors ...RequestEditorFn) (*GetMediaMediaIdResponse, error) {
	rsp, err := c.GetMediaMediaId(ctx, mediaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaMediaIdResponse(rsp)
}

// GetMediasWithResponse request returning *GetMediasResponse
func (c *ClientWithResponses) GetMediasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMediasResponse, error) {
	rsp, err := c.GetMedias(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediasResponse(rsp)
}

// DeleteProductWithBodyWithResponse request with arbitrary body returning *DeleteProductResponse
func (c *ClientWithResponses) DeleteProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error) {
	rsp, err := c.DeleteProductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductWithResponse(ctx context.Context, body DeleteProductJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error) {
	rsp, err := c.DeleteProduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductResponse(rsp)
}

// PatchProductWithBodyWithResponse request with arbitrary body returning *PatchProductResponse
func (c *ClientWithResponses) PatchProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductResponse, error) {
	rsp, err := c.PatchProductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductResponse(rsp)
}

func (c *ClientWithResponses) PatchProductWithResponse(ctx context.Context, body PatchProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductResponse, error) {
	rsp, err := c.PatchProduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductResponse(rsp)
}

// PostProductWithBodyWithResponse request with arbitrary body returning *PostProductResponse
func (c *ClientWithResponses) PostProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductResponse, error) {
	rsp, err := c.PostProductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductResponse(rsp)
}

func (c *ClientWithResponses) PostProductWithResponse(ctx context.Context, body PostProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductResponse, error) {
	rsp, err := c.PostProduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductResponse(rsp)
}

// DeleteProductMediaWithBodyWithResponse request with arbitrary body returning *DeleteProductMediaResponse
func (c *ClientWithResponses) DeleteProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductMediaResponse, error) {
	rsp, err := c.DeleteProductMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductMediaResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductMediaWithResponse(ctx context.Context, body DeleteProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductMediaResponse, error) {
	rsp, err := c.DeleteProductMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductMediaResponse(rsp)
}

// PatchProductMediaWithBodyWithResponse request with arbitrary body returning *PatchProductMediaResponse
func (c *ClientWithResponses) PatchProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProductMediaResponse, error) {
	rsp, err := c.PatchProductMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductMediaResponse(rsp)
}

func (c *ClientWithResponses) PatchProductMediaWithResponse(ctx context.Context, body PatchProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProductMediaResponse, error) {
	rsp, err := c.PatchProductMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProductMediaResponse(rsp)
}

// PostProductMediaWithBodyWithResponse request with arbitrary body returning *PostProductMediaResponse
func (c *ClientWithResponses) PostProductMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductMediaResponse, error) {
	rsp, err := c.PostProductMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductMediaResponse(rsp)
}

func (c *ClientWithResponses) PostProductMediaWithResponse(ctx context.Context, body PostProductMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductMediaResponse, error) {
	rsp, err := c.PostProductMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductMediaResponse(rsp)
}

// GetAllProductWithProductIdWithResponse request returning *GetAllProductWithProductIdResponse
func (c *ClientWithResponses) GetAllProductWithProductIdWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetAllProductWithProductIdResponse, error) {
	rsp, err := c.GetAllProductWithProductId(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllProductWithProductIdResponse(rsp)
}

// GetProductMediaProductMediaIdWithResponse request returning *GetProductMediaProductMediaIdResponse
func (c *ClientWithResponses) GetProductMediaProductMediaIdWithResponse(ctx context.Context, productMediaId string, reqEditors ...RequestEditorFn) (*GetProductMediaProductMediaIdResponse, error) {
	rsp, err := c.GetProductMediaProductMediaId(ctx, productMediaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductMediaProductMediaIdResponse(rsp)
}

// GetProductMediasWithResponse request returning *GetProductMediasResponse
func (c *ClientWithResponses) GetProductMediasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductMediasResponse, error) {
	rsp, err := c.GetProductMedias(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductMediasResponse(rsp)
}

// GetProductProductIdWithResponse request returning *GetProductProductIdResponse
func (c *ClientWithResponses) GetProductProductIdWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductProductIdResponse, error) {
	rsp, err := c.GetProductProductId(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductProductIdResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// ParseDeleteMediaResponse parses an HTTP response from a DeleteMediaWithResponse call
func ParseDeleteMediaResponse(rsp *http.Response) (*DeleteMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchMediaResponse parses an HTTP response from a PatchMediaWithResponse call
func ParsePatchMediaResponse(rsp *http.Response) (*PatchMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMediaResponse parses an HTTP response from a PostMediaWithResponse call
func ParsePostMediaResponse(rsp *http.Response) (*PostMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMediaTypeResponse parses an HTTP response from a DeleteMediaTypeWithResponse call
func ParseDeleteMediaTypeResponse(rsp *http.Response) (*DeleteMediaTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMediaTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchMediaTypeResponse parses an HTTP response from a PatchMediaTypeWithResponse call
func ParsePatchMediaTypeResponse(rsp *http.Response) (*PatchMediaTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMediaTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMediaTypeResponse parses an HTTP response from a PostMediaTypeWithResponse call
func ParsePostMediaTypeResponse(rsp *http.Response) (*PostMediaTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMediaTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMediaTypeMediaTypeIdResponse parses an HTTP response from a GetMediaTypeMediaTypeIdWithResponse call
func ParseGetMediaTypeMediaTypeIdResponse(rsp *http.Response) (*GetMediaTypeMediaTypeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaTypeMediaTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMediaTypesResponse parses an HTTP response from a GetMediaTypesWithResponse call
func ParseGetMediaTypesResponse(rsp *http.Response) (*GetMediaTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMediasResponse parses an HTTP response from a RemoveMediasWithResponse call
func ParseRemoveMediasResponse(rsp *http.Response) (*RemoveMediasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMediasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaMediaIdResponse parses an HTTP response from a GetMediaMediaIdWithResponse call
func ParseGetMediaMediaIdResponse(rsp *http.Response) (*GetMediaMediaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaMediaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMediasResponse parses an HTTP response from a GetMediasWithResponse call
func ParseGetMediasResponse(rsp *http.Response) (*GetMediasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProductResponse parses an HTTP response from a DeleteProductWithResponse call
func ParseDeleteProductResponse(rsp *http.Response) (*DeleteProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchProductResponse parses an HTTP response from a PatchProductWithResponse call
func ParsePatchProductResponse(rsp *http.Response) (*PatchProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProductResponse parses an HTTP response from a PostProductWithResponse call
func ParsePostProductResponse(rsp *http.Response) (*PostProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProductMediaResponse parses an HTTP response from a DeleteProductMediaWithResponse call
func ParseDeleteProductMediaResponse(rsp *http.Response) (*DeleteProductMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchProductMediaResponse parses an HTTP response from a PatchProductMediaWithResponse call
func ParsePatchProductMediaResponse(rsp *http.Response) (*PatchProductMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchProductMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProductMediaResponse parses an HTTP response from a PostProductMediaWithResponse call
func ParsePostProductMediaResponse(rsp *http.Response) (*PostProductMediaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllProductWithProductIdResponse parses an HTTP response from a GetAllProductWithProductIdWithResponse call
func ParseGetAllProductWithProductIdResponse(rsp *http.Response) (*GetAllProductWithProductIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllProductWithProductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Media
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductMediaProductMediaIdResponse parses an HTTP response from a GetProductMediaProductMediaIdWithResponse call
func ParseGetProductMediaProductMediaIdResponse(rsp *http.Response) (*GetProductMediaProductMediaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductMediaProductMediaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductMediasResponse parses an HTTP response from a GetProductMediasWithResponse call
func ParseGetProductMediasResponse(rsp *http.Response) (*GetProductMediasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductMediasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductProductIdResponse parses an HTTP response from a GetProductProductIdWithResponse call
func ParseGetProductProductIdResponse(rsp *http.Response) (*GetProductProductIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductProductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /media)
	DeleteMedia(ctx echo.Context) error

	// (PATCH /media)
	PatchMedia(ctx echo.Context) error

	// (POST /media)
	PostMedia(ctx echo.Context) error

	// (DELETE /media-type)
	DeleteMediaType(ctx echo.Context) error

	// (PATCH /media-type)
	PatchMediaType(ctx echo.Context) error

	// (POST /media-type)
	PostMediaType(ctx echo.Context) error
	// Your GET endpoint
	// (GET /media-type/{mediaTypeId})
	GetMediaTypeMediaTypeId(ctx echo.Context, mediaTypeId string) error
	// Your GET endpoint
	// (GET /media-types)
	GetMediaTypes(ctx echo.Context) error
	// Your GET endpoint
	// (GET /media/remove/{mediaId})
	RemoveMedias(ctx echo.Context, mediaId string) error
	// Your GET endpoint
	// (GET /media/{mediaId})
	GetMediaMediaId(ctx echo.Context, mediaId string) error
	// Your GET endpoint
	// (GET /medias)
	GetMedias(ctx echo.Context) error

	// (DELETE /product)
	DeleteProduct(ctx echo.Context) error

	// (PATCH /product)
	PatchProduct(ctx echo.Context) error

	// (POST /product)
	PostProduct(ctx echo.Context) error

	// (DELETE /product-media)
	DeleteProductMedia(ctx echo.Context) error

	// (PATCH /product-media)
	PatchProductMedia(ctx echo.Context) error

	// (POST /product-media)
	PostProductMedia(ctx echo.Context) error
	// Your GET All product media with productId endpoint
	// (GET /product-media/product/{productId})
	GetAllProductWithProductId(ctx echo.Context, productId string) error
	// Your GET endpoint
	// (GET /product-media/{productMediaId})
	GetProductMediaProductMediaId(ctx echo.Context, productMediaId string) error
	// Your GET endpoint
	// (GET /product-medias)
	GetProductMedias(ctx echo.Context) error
	// Your GET endpoint
	// (GET /product/{productId})
	GetProductProductId(ctx echo.Context, productId string) error
	// Your GET endpoint
	// (GET /products)
	GetProducts(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMedia converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMedia(ctx)
	return err
}

// PatchMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMedia(ctx)
	return err
}

// PostMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PostMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMedia(ctx)
	return err
}

// DeleteMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMediaType(ctx)
	return err
}

// PatchMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMediaType(ctx)
	return err
}

// PostMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) PostMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMediaType(ctx)
	return err
}

// GetMediaTypeMediaTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaTypeMediaTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mediaTypeId" -------------
	var mediaTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaTypeId", runtime.ParamLocationPath, ctx.Param("mediaTypeId"), &mediaTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mediaTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaTypeMediaTypeId(ctx, mediaTypeId)
	return err
}

// GetMediaTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaTypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaTypes(ctx)
	return err
}

// RemoveMedias converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveMedias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, ctx.Param("mediaId"), &mediaId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mediaId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveMedias(ctx, mediaId)
	return err
}

// GetMediaMediaId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaMediaId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, ctx.Param("mediaId"), &mediaId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mediaId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaMediaId(ctx, mediaId)
	return err
}

// GetMedias converts echo context to params.
func (w *ServerInterfaceWrapper) GetMedias(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMedias(ctx)
	return err
}

// DeleteProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProduct(ctx)
	return err
}

// PatchProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchProduct(ctx)
	return err
}

// PostProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PostProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProduct(ctx)
	return err
}

// DeleteProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProductMedia(ctx)
	return err
}

// PatchProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchProductMedia(ctx)
	return err
}

// PostProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PostProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProductMedia(ctx)
	return err
}

// GetAllProductWithProductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProductWithProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productId", runtime.ParamLocationPath, ctx.Param("productId"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllProductWithProductId(ctx, productId)
	return err
}

// GetProductMediaProductMediaId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductMediaProductMediaId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productMediaId" -------------
	var productMediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productMediaId", runtime.ParamLocationPath, ctx.Param("productMediaId"), &productMediaId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productMediaId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductMediaProductMediaId(ctx, productMediaId)
	return err
}

// GetProductMedias converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductMedias(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductMedias(ctx)
	return err
}

// GetProductProductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productId", runtime.ParamLocationPath, ctx.Param("productId"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductProductId(ctx, productId)
	return err
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProducts(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/media", wrapper.DeleteMedia)
	router.PATCH(baseURL+"/media", wrapper.PatchMedia)
	router.POST(baseURL+"/media", wrapper.PostMedia)
	router.DELETE(baseURL+"/media-type", wrapper.DeleteMediaType)
	router.PATCH(baseURL+"/media-type", wrapper.PatchMediaType)
	router.POST(baseURL+"/media-type", wrapper.PostMediaType)
	router.GET(baseURL+"/media-type/:mediaTypeId", wrapper.GetMediaTypeMediaTypeId)
	router.GET(baseURL+"/media-types", wrapper.GetMediaTypes)
	router.GET(baseURL+"/media/remove/:mediaId", wrapper.RemoveMedias)
	router.GET(baseURL+"/media/:mediaId", wrapper.GetMediaMediaId)
	router.GET(baseURL+"/medias", wrapper.GetMedias)
	router.DELETE(baseURL+"/product", wrapper.DeleteProduct)
	router.PATCH(baseURL+"/product", wrapper.PatchProduct)
	router.POST(baseURL+"/product", wrapper.PostProduct)
	router.DELETE(baseURL+"/product-media", wrapper.DeleteProductMedia)
	router.PATCH(baseURL+"/product-media", wrapper.PatchProductMedia)
	router.POST(baseURL+"/product-media", wrapper.PostProductMedia)
	router.GET(baseURL+"/product-media/product/:productId", wrapper.GetAllProductWithProductId)
	router.GET(baseURL+"/product-media/:productMediaId", wrapper.GetProductMediaProductMediaId)
	router.GET(baseURL+"/product-medias", wrapper.GetProductMedias)
	router.GET(baseURL+"/product/:productId", wrapper.GetProductProductId)
	router.GET(baseURL+"/products", wrapper.GetProducts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xa32/bNhD+V4TbHpXIXvekt3YbgmIIFgQdhmHoAyNebXYSyZCntJ7h/30gJdmS9SN2",
	"a8tK3mTySN593931I5s1JCrTSqIkC/EabLLEjPnPW+SCuQ9tlEZDAv0wR5sYoUko6X7SSiPEYMkIuYBN",
	"CIJ3D2dsgR0zmxBIUOqGigPDykI9fMaE3Fo/8cGPnsgbybJDnPFndjh0ZxTPE2q785Cv7oxI6nvLPHtA",
	"41ad1tcQHnMmSdCqNikk4aI4zWKa9vlSi7MKpT/Knjzo8TZz1u8H5ioeW7O6OK5zbdvhnmRxlkJ+Un6P",
	"cgUX9C9bXaFdKg0hPKGxngKYX8/cwUqjZFpADG+uZ9czCEEzWvogo6wKnmOKhK2Ug1/9eIBfhSUhF0FW",
	"+uWgYs7GxVNaVT4bfMzR0jvFPXeJkoTSZxPTOhWJXxd9tkWeFCXpvn40+Ali+CHa1WxUFmxU7L3xABi0",
	"Wklb8PTTbNb2+o/fXeA/d029Yzy4LxwsbOZtmz8ly2mpjPgPeYG5ZpQsOww1Z4Q9oNy5NZfE5LSHhGfH",
	"WFlq2/1i0EEs8UsfzMrS60bZDxelekVlezmqXgMqGn1v0Zb/EJwNPr//RIuXyYPQ2lXzhcE6/UGXrewh",
	"zKvSvhzk83EgL7DgJ8W92TSi9VaevOcbt3qBHaTcIHWVQ/CwCgS/bjF0gzuCbnf7w+tI3RBsnmXMrCCG",
	"v1VugpvfPgQouVZC+k00MyxDQmMh/mcNwu3hxBVUshayPVAec2GQQ0wmx7AW8b4g/Nhkz/YSdo+MByxN",
	"a2TZQZrs95IjCDN7BEtbEcuMYauLs7YFNjKYqaeqMIaKojAsEf4iaBkI3sL43hv5uPsgfgm5+s15egCO",
	"7ebSm6m3NV9etrK9ODF2IK/rvaOXixE7xiS7hd49hzwju+taUm9fHrpk9+5d4hyiptrduV/f5WuWNjdp",
	"PS9MXaH3oerl+VignlWa147pvgw+o6eZvyv34qQsXRCm+RgwnUtMl5heHfpoVtoPvpntPfedkZBJv6AN",
	"Q1Uv7gkgdZazLnsJbzSNgYe2SZAwH42EUTpJ9Stab/+L4EAJ3eBr4Ir+Nk3LSP8SVBXS6xXXb9N0Dxp/",
	"Z9uie6T61g28jtLfTZ4rfm+Puic1IqEBluvJfNc4CV5NHzvBZUq3ofl2Tg94lxluqnu8jXPVanI23RvX",
	"wR2xNOOMfBusV2wf3KN0wWe0/BTr4jtK4vBisAPEjFoC08t+/6cN5qkiKjcpxLAk0nEUpSph6VJZit/M",
	"ZnPYfNz8HwAA///xWfUp4CIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
