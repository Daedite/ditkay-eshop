// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Media defines model for Media.
type Media struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Image       *string `json:"image,omitempty"`
}

// MediaType defines model for MediaType.
type MediaType struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Product defines model for Product.
type Product struct {
	BuyPrice    *float32 `json:"buyPrice,omitempty"`
	Description *string  `json:"description,omitempty"`
	Id          *string  `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
	SellPrice   *float32 `json:"sellPrice,omitempty"`
}

// ProductMedia defines model for ProductMedia.
type ProductMedia struct {
	Id        *string `json:"id,omitempty"`
	MediaId   *string `json:"mediaId,omitempty"`
	MediaType *string `json:"mediaType,omitempty"`
}

// DeleteMediaJSONBody defines parameters for DeleteMedia.
type DeleteMediaJSONBody = Media

// PatchMediaJSONBody defines parameters for PatchMedia.
type PatchMediaJSONBody = Media

// PostMediaJSONBody defines parameters for PostMedia.
type PostMediaJSONBody = Media

// DeleteMediaTypeJSONBody defines parameters for DeleteMediaType.
type DeleteMediaTypeJSONBody = MediaType

// PatchMediaTypeJSONBody defines parameters for PatchMediaType.
type PatchMediaTypeJSONBody = MediaType

// PostMediaTypeJSONBody defines parameters for PostMediaType.
type PostMediaTypeJSONBody = MediaType

// DeleteProductJSONBody defines parameters for DeleteProduct.
type DeleteProductJSONBody = Product

// PatchProductJSONBody defines parameters for PatchProduct.
type PatchProductJSONBody = Product

// PostProductJSONBody defines parameters for PostProduct.
type PostProductJSONBody = Product

// DeleteProductMediaJSONBody defines parameters for DeleteProductMedia.
type DeleteProductMediaJSONBody = ProductMedia

// PatchProductMediaJSONBody defines parameters for PatchProductMedia.
type PatchProductMediaJSONBody = ProductMedia

// PostProductMediaJSONBody defines parameters for PostProductMedia.
type PostProductMediaJSONBody = ProductMedia

// DeleteMediaJSONRequestBody defines body for DeleteMedia for application/json ContentType.
type DeleteMediaJSONRequestBody = DeleteMediaJSONBody

// PatchMediaJSONRequestBody defines body for PatchMedia for application/json ContentType.
type PatchMediaJSONRequestBody = PatchMediaJSONBody

// PostMediaJSONRequestBody defines body for PostMedia for application/json ContentType.
type PostMediaJSONRequestBody = PostMediaJSONBody

// DeleteMediaTypeJSONRequestBody defines body for DeleteMediaType for application/json ContentType.
type DeleteMediaTypeJSONRequestBody = DeleteMediaTypeJSONBody

// PatchMediaTypeJSONRequestBody defines body for PatchMediaType for application/json ContentType.
type PatchMediaTypeJSONRequestBody = PatchMediaTypeJSONBody

// PostMediaTypeJSONRequestBody defines body for PostMediaType for application/json ContentType.
type PostMediaTypeJSONRequestBody = PostMediaTypeJSONBody

// DeleteProductJSONRequestBody defines body for DeleteProduct for application/json ContentType.
type DeleteProductJSONRequestBody = DeleteProductJSONBody

// PatchProductJSONRequestBody defines body for PatchProduct for application/json ContentType.
type PatchProductJSONRequestBody = PatchProductJSONBody

// PostProductJSONRequestBody defines body for PostProduct for application/json ContentType.
type PostProductJSONRequestBody = PostProductJSONBody

// DeleteProductMediaJSONRequestBody defines body for DeleteProductMedia for application/json ContentType.
type DeleteProductMediaJSONRequestBody = DeleteProductMediaJSONBody

// PatchProductMediaJSONRequestBody defines body for PatchProductMedia for application/json ContentType.
type PatchProductMediaJSONRequestBody = PatchProductMediaJSONBody

// PostProductMediaJSONRequestBody defines body for PostProductMedia for application/json ContentType.
type PostProductMediaJSONRequestBody = PostProductMediaJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /media)
	DeleteMedia(ctx echo.Context) error

	// (PATCH /media)
	PatchMedia(ctx echo.Context) error

	// (POST /media)
	PostMedia(ctx echo.Context) error

	// (DELETE /media-type)
	DeleteMediaType(ctx echo.Context) error

	// (PATCH /media-type)
	PatchMediaType(ctx echo.Context) error

	// (POST /media-type)
	PostMediaType(ctx echo.Context) error
	// Your GET endpoint
	// (GET /media-type/{mediaTypeId})
	GetMediaTypeMediaTypeId(ctx echo.Context, mediaTypeId string) error
	// Your GET endpoint
	// (GET /media-types)
	GetMediaTypes(ctx echo.Context) error
	// Your GET endpoint
	// (GET /media/{mediaId})
	GetMediaMediaId(ctx echo.Context, mediaId string) error
	// Your GET endpoint
	// (GET /medias)
	GetMedias(ctx echo.Context) error

	// (DELETE /product)
	DeleteProduct(ctx echo.Context) error

	// (PATCH /product)
	PatchProduct(ctx echo.Context) error

	// (POST /product)
	PostProduct(ctx echo.Context) error

	// (DELETE /product-media)
	DeleteProductMedia(ctx echo.Context) error

	// (PATCH /product-media)
	PatchProductMedia(ctx echo.Context) error

	// (POST /product-media)
	PostProductMedia(ctx echo.Context) error
	// Your GET endpoint
	// (GET /product-media/{productMediaId})
	GetProductMediaProductMediaId(ctx echo.Context, productMediaId string) error
	// Your GET endpoint
	// (GET /product-medias)
	GetProductMedias(ctx echo.Context) error
	// Your GET endpoint
	// (GET /product/{productId})
	GetProductProductId(ctx echo.Context, productId string) error
	// Your GET endpoint
	// (GET /products)
	GetProducts(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMedia converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMedia(ctx)
	return err
}

// PatchMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMedia(ctx)
	return err
}

// PostMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PostMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMedia(ctx)
	return err
}

// DeleteMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMediaType(ctx)
	return err
}

// PatchMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchMediaType(ctx)
	return err
}

// PostMediaType converts echo context to params.
func (w *ServerInterfaceWrapper) PostMediaType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMediaType(ctx)
	return err
}

// GetMediaTypeMediaTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaTypeMediaTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mediaTypeId" -------------
	var mediaTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaTypeId", runtime.ParamLocationPath, ctx.Param("mediaTypeId"), &mediaTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mediaTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaTypeMediaTypeId(ctx, mediaTypeId)
	return err
}

// GetMediaTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaTypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaTypes(ctx)
	return err
}

// GetMediaMediaId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMediaMediaId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, ctx.Param("mediaId"), &mediaId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mediaId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMediaMediaId(ctx, mediaId)
	return err
}

// GetMedias converts echo context to params.
func (w *ServerInterfaceWrapper) GetMedias(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMedias(ctx)
	return err
}

// DeleteProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProduct(ctx)
	return err
}

// PatchProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchProduct(ctx)
	return err
}

// PostProduct converts echo context to params.
func (w *ServerInterfaceWrapper) PostProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProduct(ctx)
	return err
}

// DeleteProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProductMedia(ctx)
	return err
}

// PatchProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchProductMedia(ctx)
	return err
}

// PostProductMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PostProductMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostProductMedia(ctx)
	return err
}

// GetProductMediaProductMediaId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductMediaProductMediaId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productMediaId" -------------
	var productMediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productMediaId", runtime.ParamLocationPath, ctx.Param("productMediaId"), &productMediaId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productMediaId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductMediaProductMediaId(ctx, productMediaId)
	return err
}

// GetProductMedias converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductMedias(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductMedias(ctx)
	return err
}

// GetProductProductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "productId", runtime.ParamLocationPath, ctx.Param("productId"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProductProductId(ctx, productId)
	return err
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProducts(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/media", wrapper.DeleteMedia)
	router.PATCH(baseURL+"/media", wrapper.PatchMedia)
	router.POST(baseURL+"/media", wrapper.PostMedia)
	router.DELETE(baseURL+"/media-type", wrapper.DeleteMediaType)
	router.PATCH(baseURL+"/media-type", wrapper.PatchMediaType)
	router.POST(baseURL+"/media-type", wrapper.PostMediaType)
	router.GET(baseURL+"/media-type/:mediaTypeId", wrapper.GetMediaTypeMediaTypeId)
	router.GET(baseURL+"/media-types", wrapper.GetMediaTypes)
	router.GET(baseURL+"/media/:mediaId", wrapper.GetMediaMediaId)
	router.GET(baseURL+"/medias", wrapper.GetMedias)
	router.DELETE(baseURL+"/product", wrapper.DeleteProduct)
	router.PATCH(baseURL+"/product", wrapper.PatchProduct)
	router.POST(baseURL+"/product", wrapper.PostProduct)
	router.DELETE(baseURL+"/product-media", wrapper.DeleteProductMedia)
	router.PATCH(baseURL+"/product-media", wrapper.PatchProductMedia)
	router.POST(baseURL+"/product-media", wrapper.PostProductMedia)
	router.GET(baseURL+"/product-media/:productMediaId", wrapper.GetProductMediaProductMediaId)
	router.GET(baseURL+"/product-medias", wrapper.GetProductMedias)
	router.GET(baseURL+"/product/:productId", wrapper.GetProductProductId)
	router.GET(baseURL+"/products", wrapper.GetProducts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZTY/bNhD9K8K0R+3KbnrSMW2xCIpFjSA9FEUOXHFiM5VILjlK4xr+7wUpyZasj7Ub",
	"W1L3pqWGnOF787iP8g4SlWklUZKFeAc22WDG/OMjcsHcgzZKoyGBfpijTYzQJJR0f9JWI8RgyQi5hn0I",
	"gncPZ2yNHW/2IZCg1A0VCcMqQj19xoTcXP/igx+9UjWSZecU43N2FLQyiucJtct5yrcrI5L62jLPntC4",
	"WdetNYTnnEkStK29FJJwXWSzmKZ9tdT2WW2lf5c9fdBTbeai3w28q3jsh76Rt1WXixTyk/JrlDO4oL/Y",
	"9g7tRmkI4Qsa60GG5f3CJVYaJdMCYnhzv7hfQAia0cZvI8qq7XFMkbDVVPCzHw/wq7Ak5DrIyrocGMzF",
	"uN2WUVXNBp9ztPRWcc9OoiSh9P3CtE5F4udFn23RCYXo3NP3Bj9BDN9FR1VGpSSjYu29B8Cg1Uragokf",
	"Fot21b/96jb+Y9ert4wH74sCi5hlO+Z3yXLaKCP+QV5grhklm45AzRlhDygrN2dKTK6bJLw5xspSO+4n",
	"gw5iiX/3wawsvW6U/XAh1TsqD5CL9BpQcZT3irY86m8Gn19/puJl8iy0jmqeGKzrJ5pW2UOYV9KeDvLl",
	"OJAXWPCr4t48NKLdwYC843s3e40dpDwgdckheNoGgt+3GHrAI0GPx/XhdbRuCDbPMma2EMMfKjfBwy8f",
	"ApRcKyH9IpoZliGhsRD/uQPh1nDmCirjCtkJKM+5MMghJpNjWNvxqSH82GTP9hL2HhkPWJrWyLKDNNlv",
	"JUcQZvYClg4mlhnDtpOzdgC2VMRlauiF9rG0/v9/K3atrv/PHd/f7KbR7L1cjNjis2xvfbyhv+AT6+ZH",
	"Hy7DXT7xeFW+xX/hanVXfn2Vr1naXKR1H567pexD1fvJsUC9qZespem+vbxgAJm/3PXipCxNCNNyDJhu",
	"5f5KTO/O/cpTxg9+5Dn5PnVDQmb9yWcYqrq4Z4DUTXJNe2tsHBoDX4ZmQcJyNBJGOUmina6VcbZ/bpBF",
	"AzfK+iZXjUzwavr7CiZbt6G5yGs3OD3jgjksthPexrHgTc7m68QPinlJLGUYZ8ScQA6zBuBe1WKm8nhz",
	"1MU3SOJ8MdgBYkaVwPy63/8Ka75UROUmhRg2RDqOolQlLN0oS/GbxWIJ+4/7fwMAAP//ba4tiosfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
